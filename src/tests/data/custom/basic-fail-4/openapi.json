{
  "openapi": "3.0.3",
  "servers": [
    {
      "description": "SwaggerHub API Auto Mocking",
      "url": "https://virtserver.swaggerhub.com/GRAPHSCOPE/InteractiveAPI/1.0.0"
    },
    {
      "description": "SwaggerHub API Auto Mocking",
      "url": "https://virtserver.swaggerhub.com/GRAPHSCOPE/interactive/1.0.0"
    }
  ],
  "info": {
    "description": "This is the definition of GraphScope Interactive API, including\n  - AdminService API\n  - Vertex/Edge API\n  - QueryService\n\n\nAdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.\n\nVertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.\n\nQueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.\n",
    "version": "1.0.0",
    "title": "GraphScope Interactive API v0.0.3",
    "contact": {
      "email": "graphscope@alibaba-inc.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "externalDocs": {
    "description": "Find out More about GraphScope",
    "url": "http://graphscope.io"
  },
  "tags": [
    {
      "name": "AdminService/GraphManagement",
      "description": "GraphManagement"
    },
    {
      "name": "AdminService/ProcedureManagement",
      "description": "ProcedureManagement"
    },
    {
      "name": "AdminService/ServiceManagement",
      "description": "ServiceManagement"
    },
    {
      "name": "GraphService/VertexManagement",
      "description": "VertexManagement"
    },
    {
      "name": "GraphService/EdgeManagement",
      "description": "EdgeManagement"
    },
    {
      "name": "QueryService",
      "description": "Graph query"
    }
  ],
  "paths": {
    "/v1/graph": {
      "get": {
        "tags": ["AdminService/GraphManagement"],
        "description": "List all graphs",
        "operationId": "list_graphs",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetGraphResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/graph/{graph_id}": {
      "delete": {
        "tags": ["AdminService/GraphManagement"],
        "description": "Delete a graph by name",
        "operationId": "delete_graph",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of graph to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                },
                "example": "Successfully delete graph"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                },
                "example": "Graph not found"
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                },
                "example": "Internal Error: "
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnyValue": {},
      "TypedValue": {
        "type": "object",
        "required": ["type", "value"],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GSDataType"
          },
          "value": {
            "$ref": "#/components/schemas/AnyValue"
          }
        }
      },
      "Element": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TypedValue"
          }
        ]
      },
      "Collection": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Element"
            }
          }
        }
      },
      "KeyValue": {
        "type": "object",
        "required": ["key", "value"],
        "properties": {
          "key": {
            "$ref": "#/components/schemas/TypedValue"
          },
          "value": {
            "$ref": "#/components/schemas/Element"
          }
        }
      },
      "Column": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Element"
          },
          {
            "$ref": "#/components/schemas/Collection"
          },
          {
            "$ref": "#/components/schemas/KeyValue"
          }
        ]
      },
      "Record": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          }
        }
      },
      "CollectiveResults": {
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Record"
            }
          }
        }
      },
      "PrimitiveType": {
        "x-body-name": "primitive_type",
        "type": "object",
        "required": ["primitive_type"],
        "properties": {
          "primitive_type": {
            "type": "string",
            "enum": [
              "DT_SIGNED_INT32",
              "DT_UNSIGNED_INT32",
              "DT_SIGNED_INT64",
              "DT_UNSIGNED_INT64",
              "DT_BOOL",
              "DT_FLOAT",
              "DT_DOUBLE"
            ],
            "example": "DT_SIGNED_INT32"
          }
        }
      },
      "LongText": {
        "x-body-name": "long_text",
        "type": "object",
        "required": ["long_text"],
        "properties": {
          "long_text": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FixedChar": {
        "x-body-name": "fixed_char",
        "type": "object",
        "required": ["char"],
        "properties": {
          "char": {
            "type": "object",
            "required": ["fixed_char"],
            "properties": {
              "fixed_char": {
                "type": "integer"
              }
            }
          }
        }
      },
      "VarChar": {
        "x-body-name": "var_char",
        "type": "object",
        "required": ["var_char"],
        "properties": {
          "var_char": {
            "type": "object",
            "required": ["max_length"],
            "properties": {
              "max_length": {
                "type": "integer"
              }
            }
          }
        }
      },
      "StringType": {
        "x-body-name": "string_type",
        "type": "object",
        "required": ["string"],
        "properties": {
          "string": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/LongText"
              },
              {
                "$ref": "#/components/schemas/FixedChar"
              },
              {
                "$ref": "#/components/schemas/VarChar"
              }
            ]
          }
        }
      },
      "TimeStampType": {
        "x-body-name": "time_stamp_type",
        "type": "object",
        "required": ["timestamp"],
        "properties": {
          "timestamp": {
            "type": "string"
          }
        }
      },
      "TemporalType": {
        "x-body-name": "temporal_type",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TimeStampType"
          }
        ]
      },
      "GSDataType": {
        "x-body-name": "gs_data_type",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PrimitiveType"
          },
          {
            "$ref": "#/components/schemas/StringType"
          },
          {
            "$ref": "#/components/schemas/TemporalType"
          }
        ]
      },
      "Property": {
        "x-body-name": "property",
        "type": "object",
        "required": ["name", "value"],
        "properties": {
          "name": {
            "type": "string",
            "example": "id"
          },
          "value": {
            "$ref": "#/components/schemas/AnyValue"
          }
        }
      },
      "PropertyArray": {
        "x-body-name": "property_array",
        "type": "object",
        "required": ["properties"],
        "properties": {
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        }
      },
      "Parameter": {
        "x-body-name": "parameter",
        "type": "object",
        "required": ["name", "type"],
        "properties": {
          "name": {
            "type": "string",
            "example": "param1"
          },
          "type": {
            "$ref": "#/components/schemas/GSDataType"
          }
        }
      },
      "VertexRequest": {
        "x-body-name": "vertex_request",
        "type": "object",
        "required": ["label", "primary_key_value"],
        "properties": {
          "label": {
            "type": "string",
            "example": "person"
          },
          "primary_key_value": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "properties": {
            "$ref": "#/components/schemas/PropertyArray"
          }
        }
      },
      "VertexData": {
        "x-body-name": "vertex_data",
        "type": "object",
        "required": ["label"],
        "properties": {
          "label": {
            "type": "string",
            "example": "person"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        }
      },
      "EdgeData": {
        "x-body-name": "edge_data",
        "type": "object",
        "required": [
          "src_label",
          "dst_label",
          "edge_label",
          "src_primary_key_value",
          "dst_primary_key_value",
          "properties"
        ],
        "properties": {
          "src_label": {
            "type": "string",
            "example": "person"
          },
          "dst_label": {
            "type": "string",
            "example": "software"
          },
          "edge_label": {
            "type": "string",
            "example": "created"
          },
          "src_primary_key_value": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "dst_primary_key_value": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        }
      },
      "EdgeRequest": {
        "x-body-name": "edge_request",
        "type": "object",
        "required": [
          "src_label",
          "dst_label",
          "edge_label",
          "src_primary_key_value",
          "dst_primary_key_value"
        ],
        "properties": {
          "src_label": {
            "type": "string",
            "example": "person"
          },
          "dst_label": {
            "type": "string",
            "example": "software"
          },
          "edge_label": {
            "type": "string",
            "example": "created"
          },
          "src_primary_key_value": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "dst_primary_key_value": {
            "$ref": "#/components/schemas/AnyValue"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        }
      },
      "QueryRequest": {
        "x-body-name": "query_request",
        "type": "object",
        "required": ["query_name"],
        "properties": {
          "query_name": {
            "type": "string",
            "example": "ic1"
          },
          "arguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypedValue"
            }
          }
        }
      },
      "CreateProcedureRequest": {
        "x-body-name": "create_procedure_request",
        "type": "object",
        "required": ["name", "type", "query"],
        "properties": {
          "name": {
            "type": "string",
            "example": "query1"
          },
          "description": {
            "type": "string",
            "example": "A sample stored procedure"
          },
          "type": {
            "type": "string",
            "enum": ["cpp", "cypher"]
          },
          "query": {
            "type": "string",
            "example": "MATCH(a) return COUNT(a);"
          }
        }
      },
      "CreateProcedureResponse": {
        "type": "object",
        "x-body-name": "create_procedure_response",
        "required": ["procedure_id"],
        "properties": {
          "procedure_id": {
            "type": "string",
            "example": "proc1"
          }
        }
      },
      "StoredProcedureMeta": {
        "x-body-name": "stored_procedure_meta",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateProcedureRequest"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "The unique identifier of procedure, currently is same with name."
              },
              "library": {
                "type": "string",
                "example": "/path/to/library"
              },
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Parameter"
                }
              },
              "returns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Parameter"
                }
              },
              "enable": {
                "type": "boolean",
                "example": true
              }
            }
          }
        ]
      },
      "GetProcedureResponse": {
        "x-body-name": "get_procedure_response",
        "allOf": [
          {
            "$ref": "#/components/schemas/StoredProcedureMeta"
          },
          {
            "type": "object",
            "properties": {
              "bound_graph": {
                "type": "string"
              },
              "runnable": {
                "type": "boolean"
              },
              "creation_time": {
                "type": "integer"
              }
            }
          }
        ]
      },
      "UpdateProcedureRequest": {
        "x-body-name": "update_procedure_request",
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "A sample stored procedure"
          }
        }
      },
      "CreateGraphResponse": {
        "x-body-name": "create_graph_response",
        "type": "object",
        "properties": {
          "graph_id": {
            "type": "string",
            "example": "1"
          }
        }
      },
      "CreateGraphRequest": {
        "x-body-name": "create_graph_request",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "modern_graph"
          },
          "description": {
            "type": "string",
            "example": "A default description"
          },
          "stored_procedures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateProcedureRequest"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/CreateGraphSchemaRequest"
          }
        }
      },
      "APIResponse": {
        "x-body-name": "api_response",
        "type": "string",
        "example": "Response string"
      },
      "GetGraphResponse": {
        "x-body-name": "get_graph_response",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "store_type": {
            "type": "string",
            "enum": ["mutable_csr"]
          },
          "creation_time": {
            "type": "integer",
            "example": 11223444
          },
          "data_update_time": {
            "type": "integer",
            "example": 11123445
          },
          "stored_procedures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetProcedureResponse"
            }
          },
          "schema": {
            "$ref": "#/components/schemas/GetGraphSchemaResponse"
          },
          "data_import_config": {
            "$ref": "#/components/schemas/SchemaMapping"
          }
        }
      },
      "CreateGraphSchemaRequest": {
        "x-body-name": "create_graph_schema_request",
        "type": "object",
        "properties": {
          "vertex_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateVertexType"
            }
          },
          "edge_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEdgeType"
            }
          }
        }
      },
      "GetGraphSchemaResponse": {
        "x-body-name": "get_graph_schema_response",
        "type": "object",
        "properties": {
          "vertex_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetVertexType"
            }
          },
          "edge_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetEdgeType"
            }
          }
        }
      },
      "BaseVertexType": {
        "type": "object",
        "properties": {
          "type_name": {
            "type": "string"
          },
          "primary_keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x_csr_params": {
            "type": "object",
            "description": "Used for storage optimization",
            "properties": {
              "max_vertex_num": {
                "type": "integer"
              }
            }
          }
        }
      },
      "CreateVertexType": {
        "x-body-name": "create_vertex_type",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseVertexType"
          },
          {
            "type": "object",
            "properties": {
              "properties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreatePropertyMeta"
                }
              }
            }
          }
        ]
      },
      "GetVertexType": {
        "x-body-name": "get_vertex_type",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseVertexType"
          },
          {
            "type": "object",
            "properties": {
              "type_id": {
                "type": "integer",
                "format": "int32"
              },
              "properties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GetPropertyMeta"
                }
              },
              "description": {
                "type": "string"
              }
            }
          }
        ]
      },
      "BaseEdgeType": {
        "type": "object",
        "properties": {
          "type_name": {
            "type": "string"
          },
          "vertex_type_pair_relations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "source_vertex": {
                  "type": "string"
                },
                "destination_vertex": {
                  "type": "string"
                },
                "relation": {
                  "type": "string",
                  "enum": [
                    "MANY_TO_MANY",
                    "ONE_TO_MANY",
                    "MANY_TO_ONE",
                    "ONE_TO_ONE"
                  ]
                },
                "x_csr_params": {
                  "type": "object",
                  "description": "Used for storage optimization",
                  "properties": {
                    "edge_storage_strategy": {
                      "type": "string",
                      "enum": ["ONLY_IN", "ONLY_OUT", "BOTH_OUT_IN"]
                    },
                    "sort_on_compaction": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CreateEdgeType": {
        "x-body-name": "create_edge_type",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEdgeType"
          },
          {
            "type": "object",
            "properties": {
              "properties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreatePropertyMeta"
                }
              }
            }
          }
        ]
      },
      "GetEdgeType": {
        "x-body-name": "get_edge_type",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEdgeType"
          },
          {
            "type": "object",
            "properties": {
              "type_id": {
                "type": "integer",
                "format": "int32"
              },
              "description": {
                "type": "string"
              },
              "properties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GetPropertyMeta"
                }
              }
            }
          }
        ]
      },
      "BasePropertyMeta": {
        "type": "object",
        "properties": {
          "property_name": {
            "type": "string"
          },
          "property_type": {
            "$ref": "#/components/schemas/GSDataType"
          }
        }
      },
      "CreatePropertyMeta": {
        "x-body-name": "create_property_meta",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePropertyMeta"
          }
        ]
      },
      "GetPropertyMeta": {
        "x-body-name": "get_property_meta",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePropertyMeta"
          },
          {
            "type": "object",
            "properties": {
              "property_id": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "SchemaMapping": {
        "x-body-name": "schema_mapping",
        "type": "object",
        "properties": {
          "loading_config": {
            "type": "object",
            "properties": {
              "import_option": {
                "type": "string",
                "enum": ["init", "overwrite"]
              },
              "format": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          },
          "vertex_mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VertexMapping"
            }
          },
          "edge_mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeMapping"
            }
          }
        }
      },
      "VertexMapping": {
        "x-body-name": "vertex_mapping",
        "type": "object",
        "properties": {
          "type_name": {
            "type": "string"
          },
          "inputs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "file:///path/to/person.csv"
            }
          },
          "column_mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnMapping"
            }
          }
        }
      },
      "EdgeMapping": {
        "x-body-name": "edge_mapping",
        "type": "object",
        "properties": {
          "type_triplet": {
            "type": "object",
            "description": "source label -> [edge label] -> destination label",
            "properties": {
              "edge": {
                "type": "string"
              },
              "source_vertex": {
                "type": "string"
              },
              "destination_vertex": {
                "type": "string"
              }
            }
          },
          "inputs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "source_vertex_mappings": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Mapping column to the primary key of source vertex",
              "properties": {
                "column": {
                  "type": "object",
                  "properties": {
                    "index": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "property": {
                  "type": "string",
                  "example": "id"
                }
              }
            }
          },
          "destination_vertex_mappings": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Mapping column to the primary key of destination vertex",
              "properties": {
                "column": {
                  "type": "object",
                  "properties": {
                    "index": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "property": {
                  "type": "string",
                  "example": "id"
                }
              }
            }
          },
          "column_mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnMapping"
            }
          }
        }
      },
      "ColumnMapping": {
        "x-body-name": "column_mapping",
        "type": "object",
        "properties": {
          "column": {
            "type": "object",
            "properties": {
              "index": {
                "type": "integer",
                "format": "int32"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "property": {
            "type": "string",
            "description": "must align with the schema"
          }
        }
      },
      "StartServiceRequest": {
        "x-body-name": "start_service_request",
        "properties": {
          "graph_id": {
            "type": "string"
          }
        }
      },
      "ServiceStatus": {
        "x-body-name": "service_status",
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "graph": {
            "$ref": "#/components/schemas/GetGraphResponse"
          },
          "bolt_port": {
            "type": "integer",
            "format": "int32"
          },
          "hqps_port": {
            "type": "integer",
            "format": "int32"
          },
          "gremlin_port": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "JobResponse": {
        "type": "object",
        "x-body-name": "job_response",
        "properties": {
          "job_id": {
            "type": "string"
          }
        }
      },
      "JobStatus": {
        "type": "object",
        "x-body-name": "job_status",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["RUNNING", "SUCCESS", "FAILED", "CANCELLED", "WAITING"]
          },
          "start_time": {
            "type": "integer",
            "format": "int32"
          },
          "end_time": {
            "type": "integer",
            "format": "int32"
          },
          "log": {
            "type": "string",
            "description": "URL or log string"
          },
          "detail": {
            "type": "object",
            "additionalProperties": true
          }
        }
      }
    }
  }
}
